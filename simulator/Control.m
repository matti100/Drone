%% Definition of the system in the State Space notation
% The equation of motion can be obtained from the system dynamic.
% 
% I Cardinal Equation
% 
%   [ x'' ]                  [         0         ]   [  0  ]   
%   [ y'' ] = 1/m .* o_R_b * [         0         ] + [  0  ]
%   [ z'' ]                  [ F1 + F2 + F3 + F4 ]   [ -g  ]
%
% where o_R_b is the Rotation Matrix from the Inertial Reference Frame (IRF)
% to the Body Fixed Frame (BFF)
% o -> b
% 
% 
% II Cardinal Equation / Euler Equation
% 
%    phi''    =  (B-C)/A * theta'*psi' +   Mx_b/A
%    theta''  =  (C-A)/B * phi'*psi'   +   My_b/B
%    psi''    =  (A-B)/C * phi'*theta' +   Mz_b/C
% 
% can be re-written in matrix form as:
% 
% I*w' + w x (I*w) = M
%
% where:
% - w: angular velocity vector: [phi', theta', psi']'
% - I: Inertial matrix written wrt pricipal axis of intertia:
%      I = diag([A, B, C)];
% - w': angular acceleration vector: [phi'', theta'', psi'']'
% - M: resultant vector of external torques: [Mx, My, Mz]'
%        - Mx_b = L * (F4 - F3)
%        - My_b = L * (F2 - F1)
%        - Mz_b = C1 + C2 - C3 - C4
%       where C_i, i = 1...4, are the internal torques generated by 
%       the rotors;
%       L is the arm of the torque generated by the force.
%       
%
% Note: the notation 'x_b', 'y_b', 'z_b' is intended wrt the BFF
% 
%
% State Space notation
% Variables used as states: x
% - x: x1       - x': x4        - phi: x7       - phi': x10
% - y: x2       - y': x5        - theta: x8     - theta': x11
% - z: x3       - z': x6        - psi: x9       - psi': x12
%
% Variables used as inputs: u
%  u = [w1, w2, w3, w4]'
% where w_i, i = 1...4, are the spinning rates of the rotors
% 
% Variables used as outputs: y
%  y = [x, y, z, phi, theta, psi]' = [x1, x2, x4, x7, x8, x9]'
% 
% Note: forces and torques acting on the drone can be written as function
% of the spinning rates of the rotors:
% 
% F_i = k_f * w_i^2
% C_i = k_m * w_i^2
%
% where:
% - k_f, k_m: coefficients associated to the forces and torques which can
%             be determined experimentally (are usually given by the
%             constructor of the rotor
%
% 
% Inputs:
% - simulator: random generation (with appropriate limitations)
% - real life: readings from sensors
% 
% Outputs:
% computed through the control law
%  

%%  System Initialization
% System dimensions
n_state = 12; % # states
in = 6;  % # inputs
out = 6;  % # outputs

%% Equations of motion

% Rotational dynamics
% Euler Equation
% 
%    phi''    =  (B-C)/A * theta'*psi' +   Mx_b/A
%    theta''  =  (C-A)/B * phi'*psi'   +   My_b/B
%    psi''    =  (A-B)/C * phi'*theta' +   Mz_b/C
% 
% can be re-written in matrix form as:
% 
%    I*w' + w x (I*w) = M 
%    w' = I \ (M - w x (I*w))
% 
% Using the Backward Difference Finite method we can compute w
%
%    w'(k) = ( w(k) - w(k-1) ) / deltaT
%    w(k) = w'(k)*deltaT + w(k-1);
%
% where k is the time instant at which w', w are computed


% Traslational dynamics
% 
%   [ x'' ]                  [         0         ]   [  0  ]   
%   [ y'' ] = 1/m .* o_R_b * [         0         ] + [  0  ]
%   [ z'' ]                  [ F1 + F2 + F3 + F4 ]   [ -g  ]
%
%
% using the Central Difference Finite method for second Derivatives we 
% can compute [x, y, z]
%
%   x''(k) = ( x(k) - 2*x(k-1) + x(k-2) ) / deltaT^2
%   x(k) = x''(k) * deltaT^2 + 2*x(k-1) - x(k-2)
%   same for y'', z''
%

% Commanded spinnning rates of the rotors
% w = [w1, w2, w3, w4]'         [rad/s]

w_r = [10, 10, 10, 10]';

% Lift force:                   [N]
F = w_r .* k_f;                 
% Internal torque               [Nm]
C = w_r .* k_m;

% Torque Resultant 
Mx_b = L * (F(4) - F(3));
My_b = L * (F(2) - F(1));
Mz_b = C(1) + C(2) - C(3) - C(4);

M = [Mx_b, My_b, Mz_b]';



